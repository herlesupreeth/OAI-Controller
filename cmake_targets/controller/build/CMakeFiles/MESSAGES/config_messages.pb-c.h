/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: config_messages.proto */

#ifndef PROTOBUF_C_config_5fmessages_2eproto__INCLUDED
#define PROTOBUF_C_config_5fmessages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "config_common.pb-c.h"

typedef struct _Protocol__PrpCellConfig Protocol__PrpCellConfig;
typedef struct _Protocol__PrpUeConfig Protocol__PrpUeConfig;
typedef struct _Protocol__PrpLcUeConfig Protocol__PrpLcUeConfig;


/* --- enums --- */


/* --- messages --- */

struct  _Protocol__PrpCellConfig
{
  ProtobufCMessage base;
  /*
   * The PCI of this cell
   */
  protobuf_c_boolean has_phy_cell_id;
  uint32_t phy_cell_id;
  /*
   * The PLMN cell id of this cell
   */
  protobuf_c_boolean has_cell_id;
  uint32_t cell_id;
  /*
   * PUSCH resources in RBs for hopping
   */
  protobuf_c_boolean has_pusch_hopping_offset;
  uint32_t pusch_hopping_offset;
  /*
   * One of the PRHM_* enum values
   */
  protobuf_c_boolean has_hopping_mode;
  uint32_t hopping_mode;
  /*
   * The number of subbands
   */
  protobuf_c_boolean has_n_sb;
  uint32_t n_sb;
  /*
   * The number of REGs used for PHICH
   */
  protobuf_c_boolean has_phich_resource;
  uint32_t phich_resource;
  /*
   * One of the PRPR_* enum values
   */
  /*
   * One of the PRPD_* enum values
   */
  protobuf_c_boolean has_phich_duration;
  uint32_t phich_duration;
  /*
   * See TS 36.211, section 6.9
   */
  protobuf_c_boolean has_init_nr_pdcch_ofdm_sym;
  uint32_t init_nr_pdcch_ofdm_sym;
  /*
   * The SI configuration
   */
  Protocol__PrpSiConfig *si_config;
  /*
   * The DL transmission bandwidth in RBs
   */
  protobuf_c_boolean has_dl_bandwidth;
  uint32_t dl_bandwidth;
  /*
   * The UL transmission bandwidth in RBs
   */
  protobuf_c_boolean has_ul_bandwidth;
  uint32_t ul_bandwidth;
  /*
   * One of the PRUCPL_* enum values
   */
  protobuf_c_boolean has_ul_cyclic_prefix_length;
  uint32_t ul_cyclic_prefix_length;
  /*
   * One of the PRDCPL_* enum values
   */
  protobuf_c_boolean has_dl_cyclic_prefix_length;
  uint32_t dl_cyclic_prefix_length;
  /*
   * Number of cell specific antenna ports
   */
  protobuf_c_boolean has_antenna_ports_count;
  uint32_t antenna_ports_count;
  /*
   * One of the PRDM_* enum values
   */
  protobuf_c_boolean has_duplex_mode;
  uint32_t duplex_mode;
  /*
   * DL/UL subframe assignment. TDD only
   */
  protobuf_c_boolean has_subframe_assignment;
  uint32_t subframe_assignment;
  /*
   * TDD only. See TS 36.211, table 4.2.1
   */
  protobuf_c_boolean has_special_subframe_patterns;
  uint32_t special_subframe_patterns;
  /*
   * The MBSFN radio frame period (Optional)
   */
  size_t n_mbsfn_subframe_config_rfperiod;
  uint32_t *mbsfn_subframe_config_rfperiod;
  /*
   * The radio frame offset (Optional)
   */
  size_t n_mbsfn_subframe_config_rfoffset;
  uint32_t *mbsfn_subframe_config_rfoffset;
  /*
   * Bitmap indicating the MBSFN subframes (Optional)
   */
  size_t n_mbsfn_subframe_config_sfalloc;
  uint32_t *mbsfn_subframe_config_sfalloc;
  /*
   * See TS 36.211, section 5.7.1
   */
  protobuf_c_boolean has_prach_config_index;
  uint32_t prach_config_index;
  /*
   * See TS 36.211, section 5.7.1
   */
  protobuf_c_boolean has_prach_freq_offset;
  uint32_t prach_freq_offset;
  /*
   * The duration of the RA response window in SF
   */
  protobuf_c_boolean has_ra_response_window_size;
  uint32_t ra_response_window_size;
  /*
   * Timer for RA
   */
  protobuf_c_boolean has_mac_contention_resolution_timer;
  uint32_t mac_contention_resolution_timer;
  /*
   * See TS 36.321
   */
  protobuf_c_boolean has_max_harq_msg3tx;
  uint32_t max_harq_msg3tx;
  /*
   * See TS 36.213, section 10.1
   */
  protobuf_c_boolean has_n1pucch_an;
  uint32_t n1pucch_an;
  /*
   * See TS 36.211, section 5.4
   */
  protobuf_c_boolean has_deltapucch_shift;
  uint32_t deltapucch_shift;
  /*
   * See TS 36.211, section 5.4
   */
  protobuf_c_boolean has_nrb_cqi;
  uint32_t nrb_cqi;
  /*
   * See TS 36.211, table 5.5.3.3-1 and 2
   */
  protobuf_c_boolean has_srs_subframe_config;
  uint32_t srs_subframe_config;
  /*
   * See TS 36.211, section 5.5.3.2
   */
  protobuf_c_boolean has_srs_bw_config;
  uint32_t srs_bw_config;
  /*
   * Boolean value. See TS 36.211, section 5.5.3.2. TDD only
   */
  protobuf_c_boolean has_srs_mac_up_pts;
  uint32_t srs_mac_up_pts;
  /*
   * One of the PREQ_* enum values
   */
  protobuf_c_boolean has_enable_64qam;
  uint32_t enable_64qam;
  /*
   * Carrier component index
   */
  protobuf_c_boolean has_carrier_index;
  uint32_t carrier_index;
};
#define PROTOCOL__PRP_CELL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__prp_cell_config__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Protocol__PrpUeConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_rnti;
  uint32_t rnti;
  /*
   * The DRX configuration (Optional)
   */
  Protocol__PrpDrxConfig *drx_config;
  /*
   * Timer in SF. Control the synchronization
   */
  protobuf_c_boolean has_time_alignment_timer;
  uint32_t time_alignment_timer;
  /*
   * status of the UE, not the actual advance procedure
   * See TS 36.321
   */
  /*
   * Measurement gap configuration.
   */
  protobuf_c_boolean has_meas_gap_config_pattern;
  uint32_t meas_gap_config_pattern;
  /*
   * One of the PRMGCP_* enum values
   * See TS 36.133
   */
  /*
   * Measurement gap offset if applicable
   */
  protobuf_c_boolean has_meas_gap_config_sf_offset;
  uint32_t meas_gap_config_sf_offset;
  /*
   * The SPS configuration (Optional)
   */
  Protocol__PrpSpsConfig *sps_config;
  /*
   * The SR configuration (Optional)
   */
  Protocol__PrpSrConfig *sr_config;
  /*
   * The CQI configuration (Optional)
   */
  Protocol__PrpCqiConfig *cqi_config;
  /*
   * The UE transmission mode
   */
  protobuf_c_boolean has_transmission_mode;
  uint32_t transmission_mode;
  /*
   * Aggregated bit-rate of non-gbr bearer
   */
  protobuf_c_boolean has_ue_aggregated_max_bitrate_ul;
  uint64_t ue_aggregated_max_bitrate_ul;
  /*
   * per UE. See TS 36.413
   */
  /*
   * Aggregated bit-rate of non-gbr bearer
   */
  protobuf_c_boolean has_ue_aggregated_max_bitrate_dl;
  uint64_t ue_aggregated_max_bitrate_dl;
  /*
   * per UE. See TS 36.413
   */
  Protocol__PrpUeCapabilities *capabilities;
  /*
   * One of the PRUTA_* enum values
   */
  protobuf_c_boolean has_ue_transmission_antenna;
  uint32_t ue_transmission_antenna;
  /*
   * Boolean value. See TS 36.321
   */
  protobuf_c_boolean has_tti_bundling;
  uint32_t tti_bundling;
  /*
   * The max HARQ retransmission for UL
   */
  protobuf_c_boolean has_max_harq_tx;
  uint32_t max_harq_tx;
  /*
   * See TS 36.213
   */
  protobuf_c_boolean has_beta_offset_ack_index;
  uint32_t beta_offset_ack_index;
  /*
   * See TS 36.213
   */
  protobuf_c_boolean has_beta_offset_ri_index;
  uint32_t beta_offset_ri_index;
  /*
   * See TS 36.213
   */
  protobuf_c_boolean has_beta_offset_cqi_index;
  uint32_t beta_offset_cqi_index;
  /*
   * Boolean. See TS 36.213
   */
  protobuf_c_boolean has_ack_nack_simultaneous_trans;
  uint32_t ack_nack_simultaneous_trans;
  /*
   * Boolean. See TS 36.213
   */
  protobuf_c_boolean has_simultaneous_ack_nack_cqi;
  uint32_t simultaneous_ack_nack_cqi;
  /*
   * One of the PRACRM_* enum values
   */
  protobuf_c_boolean has_aperiodic_cqi_rep_mode;
  uint32_t aperiodic_cqi_rep_mode;
  /*
   * One of the PRTANFM_* enum values
   */
  protobuf_c_boolean has_tdd_ack_nack_feedback;
  uint32_t tdd_ack_nack_feedback;
  /*
   * See TS 36.213, section 10.1
   */
  protobuf_c_boolean has_ack_nack_repetition_factor;
  uint32_t ack_nack_repetition_factor;
  /*
   * Boolean for extended BSR size
   */
  protobuf_c_boolean has_extended_bsr_size;
  uint32_t extended_bsr_size;
  /*
   * Boolean. Support for carrier aggregation
   */
  protobuf_c_boolean has_ca_support;
  uint32_t ca_support;
  /*
   * Boolean value
   */
  protobuf_c_boolean has_cross_carrier_sched_support;
  uint32_t cross_carrier_sched_support;
  /*
   * Index of primary cell
   */
  protobuf_c_boolean has_pcell_carrier_index;
  uint32_t pcell_carrier_index;
  /*
   * Secondary cells configuration
   */
  size_t n_scell_config;
  Protocol__PrpScellConfig **scell_config;
  /*
   * Deactivation timer for secondary cell
   */
  protobuf_c_boolean has_scell_deactivation_timer;
  uint32_t scell_deactivation_timer;
};
#define PROTOCOL__PRP_UE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__prp_ue_config__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0 }


struct  _Protocol__PrpLcUeConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_rnti;
  uint32_t rnti;
  /*
   * A list of LC configurations for the given UE
   */
  size_t n_lc_config;
  Protocol__PrpLcConfig **lc_config;
};
#define PROTOCOL__PRP_LC_UE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protocol__prp_lc_ue_config__descriptor) \
    , 0,0, 0,NULL }


/* Protocol__PrpCellConfig methods */
void   protocol__prp_cell_config__init
                     (Protocol__PrpCellConfig         *message);
size_t protocol__prp_cell_config__get_packed_size
                     (const Protocol__PrpCellConfig   *message);
size_t protocol__prp_cell_config__pack
                     (const Protocol__PrpCellConfig   *message,
                      uint8_t             *out);
size_t protocol__prp_cell_config__pack_to_buffer
                     (const Protocol__PrpCellConfig   *message,
                      ProtobufCBuffer     *buffer);
Protocol__PrpCellConfig *
       protocol__prp_cell_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__prp_cell_config__free_unpacked
                     (Protocol__PrpCellConfig *message,
                      ProtobufCAllocator *allocator);
/* Protocol__PrpUeConfig methods */
void   protocol__prp_ue_config__init
                     (Protocol__PrpUeConfig         *message);
size_t protocol__prp_ue_config__get_packed_size
                     (const Protocol__PrpUeConfig   *message);
size_t protocol__prp_ue_config__pack
                     (const Protocol__PrpUeConfig   *message,
                      uint8_t             *out);
size_t protocol__prp_ue_config__pack_to_buffer
                     (const Protocol__PrpUeConfig   *message,
                      ProtobufCBuffer     *buffer);
Protocol__PrpUeConfig *
       protocol__prp_ue_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__prp_ue_config__free_unpacked
                     (Protocol__PrpUeConfig *message,
                      ProtobufCAllocator *allocator);
/* Protocol__PrpLcUeConfig methods */
void   protocol__prp_lc_ue_config__init
                     (Protocol__PrpLcUeConfig         *message);
size_t protocol__prp_lc_ue_config__get_packed_size
                     (const Protocol__PrpLcUeConfig   *message);
size_t protocol__prp_lc_ue_config__pack
                     (const Protocol__PrpLcUeConfig   *message,
                      uint8_t             *out);
size_t protocol__prp_lc_ue_config__pack_to_buffer
                     (const Protocol__PrpLcUeConfig   *message,
                      ProtobufCBuffer     *buffer);
Protocol__PrpLcUeConfig *
       protocol__prp_lc_ue_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protocol__prp_lc_ue_config__free_unpacked
                     (Protocol__PrpLcUeConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Protocol__PrpCellConfig_Closure)
                 (const Protocol__PrpCellConfig *message,
                  void *closure_data);
typedef void (*Protocol__PrpUeConfig_Closure)
                 (const Protocol__PrpUeConfig *message,
                  void *closure_data);
typedef void (*Protocol__PrpLcUeConfig_Closure)
                 (const Protocol__PrpLcUeConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protocol__prp_cell_config__descriptor;
extern const ProtobufCMessageDescriptor protocol__prp_ue_config__descriptor;
extern const ProtobufCMessageDescriptor protocol__prp_lc_ue_config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_config_5fmessages_2eproto__INCLUDED */
